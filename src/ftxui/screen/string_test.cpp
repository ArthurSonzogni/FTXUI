#include "ftxui/screen/string.hpp"
#include <gtest/gtest.h>
#include <string>  // for allocator, string

namespace ftxui {

TEST(StringTest, StringWidth) {
  // Basic:
  EXPECT_EQ(0, string_width(""));
  EXPECT_EQ(1, string_width("a"));
  EXPECT_EQ(2, string_width("ab"));
  EXPECT_EQ(1, string_width("‚¨§"));

  // Fullwidth glyphs:
  EXPECT_EQ(2, string_width("Êµã"));
  EXPECT_EQ(4, string_width("ÊµãËØï"));
  EXPECT_EQ(2, string_width("‚ö´"));
  EXPECT_EQ(2, string_width("ü™ê"));

  // Combining characters:
  EXPECT_EQ(1, string_width("aÃÑ"));
  EXPECT_EQ(1, string_width("a‚Éí"));
  EXPECT_EQ(1, string_width("aÃó"));
  // Control characters:
  EXPECT_EQ(0, string_width("\1"));
  EXPECT_EQ(2, string_width("a\1a"));
}

TEST(StringTest, Utf8ToGlyphs) {
  using T = std::vector<std::string>;
  // Basic:
  EXPECT_EQ(Utf8ToGlyphs(""), T({}));
  EXPECT_EQ(Utf8ToGlyphs("a"), T({"a"}));
  EXPECT_EQ(Utf8ToGlyphs("ab"), T({"a", "b"}));
  // Fullwidth glyphs:
  EXPECT_EQ(Utf8ToGlyphs("Êµã"), T({"Êµã", ""}));
  EXPECT_EQ(Utf8ToGlyphs("ÊµãËØï"), T({"Êµã", "", "ËØï", ""}));
  // Combining characters:
  EXPECT_EQ(Utf8ToGlyphs("aÃÑ"), T({"aÃÑ"}));
  EXPECT_EQ(Utf8ToGlyphs("a‚Éí"), T({"a‚Éí"}));
  EXPECT_EQ(Utf8ToGlyphs("aÃó"), T({"aÃó"}));
  // Control characters:
  EXPECT_EQ(Utf8ToGlyphs("\1"), T({}));
  EXPECT_EQ(Utf8ToGlyphs("a\1a"), T({"a", "a"}));
}

TEST(StringTest, GlyphCount) {
  // Basic:
  EXPECT_EQ(GlyphCount(""), 0);
  EXPECT_EQ(GlyphCount("a"), 1);
  EXPECT_EQ(GlyphCount("ab"), 2);
  // Fullwidth glyphs:
  EXPECT_EQ(GlyphCount("Êµã"), 1);
  EXPECT_EQ(GlyphCount("ÊµãËØï"), 2);
  // Combining characters:
  EXPECT_EQ(GlyphCount("aÃÑ"), 1);
  EXPECT_EQ(GlyphCount("a‚Éí"), 1);
  EXPECT_EQ(GlyphCount("aÃó"), 1);
  // Control characters:
  EXPECT_EQ(GlyphCount("\1"), 0);
  EXPECT_EQ(GlyphCount("a\1a"), 2);
}

TEST(StringTest, GlyphPosition) {
  // Basic:
  EXPECT_EQ(GlyphPosition("", -1), 0);
  EXPECT_EQ(GlyphPosition("", 0), 0);
  EXPECT_EQ(GlyphPosition("", 1), 0);
  EXPECT_EQ(GlyphPosition("a", 0), 0);
  EXPECT_EQ(GlyphPosition("a", 1), 1);
  EXPECT_EQ(GlyphPosition("ab", 0), 0);
  EXPECT_EQ(GlyphPosition("ab", 1), 1);
  EXPECT_EQ(GlyphPosition("ab", 2), 2);
  EXPECT_EQ(GlyphPosition("abc", 0), 0);
  EXPECT_EQ(GlyphPosition("abc", 1), 1);
  EXPECT_EQ(GlyphPosition("abc", 2), 2);
  EXPECT_EQ(GlyphPosition("abc", 3), 3);
  // Fullwidth glyphs:
  EXPECT_EQ(GlyphPosition("Êµã", 0), 0);
  EXPECT_EQ(GlyphPosition("Êµã", 1), 3);
  EXPECT_EQ(GlyphPosition("ÊµãËØï", 0), 0);
  EXPECT_EQ(GlyphPosition("ÊµãËØï", 1), 3);
  EXPECT_EQ(GlyphPosition("ÊµãËØï", 2), 6);
  EXPECT_EQ(GlyphPosition("ÊµãËØï", 1, 3), 6);
  EXPECT_EQ(GlyphPosition("ÊµãËØï", 1, 0), 3);
  // Combining characters:
  EXPECT_EQ(GlyphPosition("aÃÑ", 0), 0);
  EXPECT_EQ(GlyphPosition("aÃÑ", 1), 3);
  EXPECT_EQ(GlyphPosition("a‚ÉíaÃóaÃÑ", 0), 0);
  EXPECT_EQ(GlyphPosition("a‚ÉíaÃóaÃÑ", 1), 4);
  EXPECT_EQ(GlyphPosition("a‚ÉíaÃóaÃÑ", 2), 7);
  EXPECT_EQ(GlyphPosition("a‚ÉíaÃóaÃÑ", 3), 10);
  // Control characters:
  EXPECT_EQ(GlyphPosition("\1", 0), 0);
  EXPECT_EQ(GlyphPosition("\1", 1), 1);
  EXPECT_EQ(GlyphPosition("a\1a", 0), 0);
  EXPECT_EQ(GlyphPosition("a\1a", 1), 2);
  EXPECT_EQ(GlyphPosition("a\1a", 2), 3);
}

TEST(StringTest, CellToGlyphIndex) {
  // Basic:
  auto basic = CellToGlyphIndex("abc");
  ASSERT_EQ(basic.size(), 3);
  EXPECT_EQ(basic[0], 0);
  EXPECT_EQ(basic[1], 1);
  EXPECT_EQ(basic[2], 2);

  // Fullwidth glyphs:
  auto fullwidth = CellToGlyphIndex("ÊµãËØï");
  ASSERT_EQ(fullwidth.size(), 4);
  EXPECT_EQ(fullwidth[0], 0);
  EXPECT_EQ(fullwidth[1], 0);
  EXPECT_EQ(fullwidth[2], 1);
  EXPECT_EQ(fullwidth[3], 1);

  // Combining characters:
  auto combining = CellToGlyphIndex("a‚ÉíaÃóaÃÑ");
  ASSERT_EQ(combining.size(), 3);
  EXPECT_EQ(combining[0], 0);
  EXPECT_EQ(combining[1], 1);
  EXPECT_EQ(combining[2], 2);
}

TEST(StringTest, Utf8ToWordBreakProperty) {
  using T = std::vector<WordBreakProperty>;
  using P = WordBreakProperty;
  EXPECT_EQ(Utf8ToWordBreakProperty("a"), T({P::ALetter}));
  EXPECT_EQ(Utf8ToWordBreakProperty("0"), T({P::Numeric}));
  EXPECT_EQ(Utf8ToWordBreakProperty("◊ê"), T({P::Hebrew_Letter}));
  EXPECT_EQ(Utf8ToWordBreakProperty("„á∞"), T({P::Katakana}));
  EXPECT_EQ(Utf8ToWordBreakProperty(" "), T({P::WSegSpace}));
  EXPECT_EQ(Utf8ToWordBreakProperty("\""), T({P::Double_Quote}));
  EXPECT_EQ(Utf8ToWordBreakProperty("'"), T({P::Single_Quote}));
  EXPECT_EQ(Utf8ToWordBreakProperty(":"), T({P::MidLetter}));
  EXPECT_EQ(Utf8ToWordBreakProperty("."), T({P::MidNumLet}));
  EXPECT_EQ(Utf8ToWordBreakProperty("\r"), T({}));  // FIXME
  EXPECT_EQ(Utf8ToWordBreakProperty("\n"), T({}));  // FIXME
}

TEST(StringTest, to_string) {
  EXPECT_EQ(to_string(L"hello"), "hello");
  EXPECT_EQ(to_string(L"‚Ç¨"), "‚Ç¨");
  EXPECT_EQ(to_string(L"√ø"), "√ø");
  EXPECT_EQ(to_string(L"ﬂø"), "ﬂø");
  EXPECT_EQ(to_string(L"…∞…±"), "…∞…±");
  EXPECT_EQ(to_string(L"¬´¬ª"), "¬´¬ª");
  EXPECT_EQ(to_string(L"Âµ∞Âµ≤Âµ´"), "Âµ∞Âµ≤Âµ´");
  EXPECT_EQ(to_string(L"üéÖüéÑ"), "üéÖüéÑ");
}

TEST(StringTest, to_wstring) {
  EXPECT_EQ(to_wstring(std::string("hello")), L"hello");
  EXPECT_EQ(to_wstring(std::string("‚Ç¨")), L"‚Ç¨");
  EXPECT_EQ(to_wstring(std::string("√ø")), L"√ø");
  EXPECT_EQ(to_wstring(std::string("ﬂø")), L"ﬂø");
  EXPECT_EQ(to_wstring(std::string("…∞…±")), L"…∞…±");
  EXPECT_EQ(to_wstring(std::string("¬´¬ª")), L"¬´¬ª");
  EXPECT_EQ(to_wstring(std::string("Âµ∞Âµ≤Âµ´")), L"Âµ∞Âµ≤Âµ´");
  EXPECT_EQ(to_wstring(std::string("üéÖüéÑ")), L"üéÖüéÑ");
}

}  // namespace ftxui
// Copyright 2020 Arthur Sonzogni. All rights reserved.
// Use of this source code is governed by the MIT license that can be found in
// the LICENSE file.
